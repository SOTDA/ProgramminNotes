c# oops 

object is declare by class and its can have modifier
Constructor is used to create to control how the object is created

Type of coustructors-
    Default Constructor - Static variable 
    Parameterized Constructor -
    Copy Constructor - use to deep copy object (clone object)
    Static Constructor - need to understand more
    Private Constructor - class with private constructor cannot be initiated or create an object of constructor
        use - to create the instance of certain utility and common routin class.(Used in singleton pattern)

static class
     use - it is use as a container to declare static property and method.
    static class are created when the application is running, static class cannot implement an interface 
    you cannot pass static class as a parameter of method or function.

Extension methods -  
    it allow us to add new method into existing class without modifying the source code of original class. it must be static.
    it is used when we need to use some method throughout the application.
    method contains this keyword followed by Class Name of extension.


4 pillars-
    Inheritance 
    Encaptulation
    Polymorphism
    Data Abstraction

        Inheritance - is creating parent child relationship between class where child class will automatically get the property and method of parent class.
            Use - reusability (Eg. Parent-car Class child- EVCar , HybridCar , ICCar etc with some common property and methods of parent class.)
            Types-
            Single Inheritance
            Multiple Inheritance - in c# multiple inheritance is not possible. Alternative is to create multiple interfaces.
            Multilevel Inheritance.
            hierarchical inheritance.

            If same method is present in both parent and derived class it is managed by virtual and override keywords.

            Sealed and staic keyword is use to prevent class form inheritance.
            Diffrence - you can't create object of sealed class but you can create object of static class.

            we can call the constructor of the base class from the derived class like -
                    public class TestClass2 : TestClass1
                    public TestClass2 (string str1,string str2): base(str1,str2) //Calling base constructor explicitly
                    {
                    }
                

        Encaptulation - it is use for security and hiding the unnecessary details.
            achived by class identifiers (public,private etc)
            generally the private field is created and accessed with get set property.


        Abstraction-
             can be achived with abstract classes and interfaces.

                Diffrence Between interfaces and abstract classes
                    object of abstract class cannot be created and it can contain both abstract and regular method
                    interfaces only contains body and cannot contains field
                    Interface members are by default abstract and public
                    An interface cannot contain a constructor (as it cannot be used to create objects)
                    C# does not support "multiple inheritance" (a class can only inherit from one base class).
                    However, it can be achieved with interfaces, because the class can implement multiple interfaces. Note: To implement multiple interfaces, separate them with a comma (see example below).
                    Abstract class can contain different types of access modifiers like public, private, protected etc. Interface contains public access modifier because everything in the interface is public.
                    Abstract classes also have the added benefit in polymorphism–allowing you to use the (abstract) superclass's type as a method argument or a return type. If for example you had a PetOwner
                    class with a train() method you can define it as taking in an object of type Animal e.g. train(Animal a) as opposed to creating a method for every subtype of Animal.

                abstract calss
                    abstract modifier in a class declaration to indicate that a class is intended only to be a base class of other classes, not instantiated on its own
                    An abstract class may contain abstract methods and accessors.
                    A non-abstract class derived from an abstract class must include actual implementations of all inherited abstract methods and accessors.
                    It is an error to use the static or virtual modifiers in an abstract method declaration.

        Polymorphism -
            Compile time - method overloading ,operator overloading
            runtime - virual and override 


Destructor-
    A Destructor is used to free the dynamically allocated memory and release the resources. It is instantly invoked when the Object is destroyed.

Diffrence Between class and structure
    A struct is a value type, whereas a class is a reference type.
    struct is stack type and class is heap type
    struct is value type and class is reference type
    inheritance not supported , class supported
    parameterless counstructor not supported , class supported
    Assignment Operation	Copies the value ,	Copies the reference


Dependency Injection
    Dependency injection is use to create less coupled code and it will create centeralized intiation insted of , initialization of code every places.
    thus if code changes or parameter changes we didn't have to change it in every places.
    types-
        transient - for each use create new instance of object.
        singleton - only one instance is created for all application.
        scoped - hybrid maintain the access 
    we can use DI with constructor Injection,property and function injection.
    (there are diffrent type of Dependency Injection containers)


Singleton 
    Only make one instance of class . Make sure to make it thread safe by using lock.
    Use cases - when there is may to one relation and different resource need to access one instance of class.
    eg- logging service. (tip make singleton pattern for read-only things). Alternatives DI and 15:39 30-06-2024 class.


SOLID Principles
    Single Responsibility Principles
    Open Close Principles
    Liskoves Principles
    Interface Segregation Principles
    Dependency Inversion Principles

    
Lazy Loading in c#
    Generally used with entitiy framework
    Loads the data for the first time when used not when object is created.
    Using IEnumerable in c# acessing db entitiy is by default lazy laoding.
    Does not load child elements if you dont ask for it.

    Include and thenInclude in EntiyFrameWork will egarload all childdata.
    Entry and Collection,refrence is use for Explicit loading.

var vs dynamic
    changing type in code will give error after declaration in var and dynamic will not give compile time error.


Generic in c#
    it allow us to make the method type independent or typesafe .
    we can also create generic classes and it can be use so that we didn't have to put type in front of every method while using generic methods.


IEnumberable - It is basically use to iterate over list of Class or type like string int etc.
    List<T> is derived from IEnumerable And IEnumerator.

IQueryable - Iqueryable is inherited form IEnumerable so anything that you can do in the IEnumerable can be done in IQueryable 

    Difference IEnumerable is used with in memory object like list and array. IQueryable is better getting result from database.
    IEnumerable will get the whole data from database and then perform filtration while in Iqueryable it will fetch only filtered data from database.
    IQuerable is in SYSTEM.LINQ namespace and IEnumerable is in SYSTEM.Collection namespace.

Delegates - Delegates in C# are similar to the function pointer in C/C++. Delegates are the library class in System namespace.
    These are the type-safe pointer of any method.
    Delegates are mainly used to implementing the callback method and events.
    Delegates can be chained together as two or more methods can be called on a single event.
    It doesn’t care about the class of the object that it references.
    A delegate will call only a method which agrees with its signature and return type. A method can be a static method associated with a class or can be an
     instance method associated with an object, it doesn’t matter. 

To LEARN
value type and refrence type
Boxing and Unboxing.
repository pattern
implicit and explicit interface
staic and non static memebers
Exception and multiple exception    

Yes, one can create an Object Creation by using the following methods-

Abstract Class, Static Class, Private or Protected Constructor.

